import sys
import re
import os
p5_attr = [
    "_initializeInstanceVariables",
    "P2D",
    "WEBGL",
    "ARROW",
    "CROSS",
    "HAND",
    "MOVE",
    "TEXT",
    "WAIT",
    "HALF_PI",
    "PI",
    "QUARTER_PI",
    "TAU",
    "TWO_PI",
    "DEGREES",
    "RADIANS",
    "DEG_TO_RAD",
    "RAD_TO_DEG",
    "CORNER",
    "CORNERS",
    "RADIUS",
    "RIGHT",
    "LEFT",
    "CENTER",
    "TOP",
    "BOTTOM",
    "BASELINE",
    "POINTS",
    "LINES",
    "LINE_STRIP",
    "LINE_LOOP",
    "TRIANGLES",
    "TRIANGLE_FAN",
    "TRIANGLE_STRIP",
    "QUADS",
    "QUAD_STRIP",
    "CLOSE",
    "OPEN",
    "CHORD",
    "PIE",
    "PROJECT",
    "SQUARE",
    "ROUND",
    "BEVEL",
    "MITER",
    "RGB",
    "HSB",
    "HSL",
    "AUTO",
    "ALT",
    "BACKSPACE",
    "CONTROL",
    "DELETE",
    "DOWN_ARROW",
    "ENTER",
    "ESCAPE",
    "LEFT_ARROW",
    "OPTION",
    "RETURN",
    "RIGHT_ARROW",
    "SHIFT",
    "TAB",
    "UP_ARROW",
    "BLEND",
    "ADD",
    "DARKEST",
    "LIGHTEST",
    "DIFFERENCE",
    "EXCLUSION",
    "MULTIPLY",
    "SCREEN",
    "REPLACE",
    "OVERLAY",
    "HARD_LIGHT",
    "SOFT_LIGHT",
    "DODGE",
    "BURN",
    "THRESHOLD",
    "GRAY",
    "OPAQUE",
    "INVERT",
    "POSTERIZE",
    "DILATE",
    "ERODE",
    "BLUR",
    "NORMAL",
    "ITALIC",
    "BOLD",
    "_DEFAULT_TEXT_FILL",
    "_DEFAULT_LEADMULT",
    "_CTX_MIDDLE",
    "LINEAR",
    "QUADRATIC",
    "BEZIER",
    "CURVE",
    "STROKE",
    "FILL",
    "TEXTURE",
    "IMMEDIATE",
    "NEAREST",
    "REPEAT",
    "CLAMP",
    "MIRROR",
    "LANDSCAPE",
    "PORTRAIT",
    "_DEFAULT_STROKE",
    "_DEFAULT_FILL",
    "GRID",
    "AXES",
    "_preloadMethods",
    "_registeredMethods",
    "_registeredPreloadMethods",
    "registerPreloadMethod",
    "registerMethod",
    "_createFriendlyGlobalFunctionBinder",
    "_frameRate",
    "_lastFrameTime",
    "_targetFrameRate",
    "print",
    "frameCount",
    "focused",
    "cursor",
    "frameRate",
    "getFrameRate",
    "setFrameRate",
    "noCursor",
    "displayWidth",
    "displayHeight",
    "windowWidth",
    "windowHeight",
    "_onresize",
    "width",
    "height",
    "fullscreen",
    "pixelDensity",
    "displayDensity",
    "getURL",
    "getURLPath",
    "getURLParams",
    "_helpForMisusedAtTopLevelCode",
    "exit",
    "pushStyle",
    "popStyle",
    "size",
    "camera",
    "perspective",
    "ortho",
    "createCamera",
    "setCamera",
    "setAttributes",
    "_assert3d",
    "createCanvas",
    "resizeCanvas",
    "noCanvas",
    "createGraphics",
    "blendMode",
    "noLoop",
    "loop",
    "push",
    "pop",
    "redraw",
    "applyMatrix",
    "popMatrix",
    "printMatrix",
    "pushMatrix",
    "resetMatrix",
    "rotate",
    "rotateX",
    "rotateY",
    "rotateZ",
    "scale",
    "shearX",
    "shearY",
    "translate",
    "arc",
    "ellipse",
    "line",
    "point",
    "quad",
    "rect",
    "triangle",
    "ellipseMode",
    "noSmooth",
    "rectMode",
    "smooth",
    "strokeCap",
    "strokeJoin",
    "strokeWeight",
    "bezier",
    "bezierDetail",
    "bezierPoint",
    "bezierTangent",
    "curve",
    "curveDetail",
    "curveTightness",
    "curvePoint",
    "curveTangent",
    "beginContour",
    "beginShape",
    "bezierVertex",
    "curveVertex",
    "endContour",
    "endShape",
    "quadraticVertex",
    "vertex",
    "alpha",
    "blue",
    "brightness",
    "color",
    "green",
    "hue",
    "lerpColor",
    "lightness",
    "red",
    "saturation",
    "background",
    "clear",
    "colorMode",
    "fill",
    "noFill",
    "noStroke",
    "stroke",
    "createStringDict",
    "createNumberDict",
    "deviceOrientation",
    "accelerationX",
    "accelerationY",
    "accelerationZ",
    "pAccelerationX",
    "pAccelerationY",
    "pAccelerationZ",
    "_updatePAccelerations",
    "rotationX",
    "rotationY",
    "rotationZ",
    "pRotationX",
    "pRotationY",
    "pRotationZ",
    "_updatePRotations",
    "turnAxis",
    "setMoveThreshold",
    "setShakeThreshold",
    "_ondeviceorientation",
    "_ondevicemotion",
    "_handleMotion",
    "isKeyPressed",
    "keyIsPressed",
    "key",
    "keyCode",
    "_onkeydown",
    "_onkeyup",
    "_onkeypress",
    "_onblur",
    "keyIsDown",
    "_hasMouseInteracted",
    "mouseX",
    "mouseY",
    "pmouseX",
    "pmouseY",
    "winMouseX",
    "winMouseY",
    "pwinMouseX",
    "pwinMouseY",
    "mouseButton",
    "mouseIsPressed",
    "_updateNextMouseCoords",
    "_updateMouseCoords",
    "_setMouseButton",
    "_onmousemove",
    "_onmousedown",
    "_onmouseup",
    "_ondragend",
    "_ondragover",
    "_onclick",
    "_ondblclick",
    "_mouseWheelDeltaY",
    "_pmouseWheelDeltaY",
    "_onwheel",
    "touches",
    "_updateTouchCoords",
    "_ontouchstart",
    "_ontouchmove",
    "_ontouchend",
    "createImage",
    "saveCanvas",
    "saveFrames",
    "_makeFrame",
    "loadImage",
    "image",
    "tint",
    "noTint",
    "_getTintedImageCanvas",
    "imageMode",
    "pixels",
    "blend",
    "copy",
    "filter",
    "get",
    "loadPixels",
    "set",
    "updatePixels",
    "loadJSON",
    "loadStrings",
    "loadTable",
    "loadXML",
    "loadBytes",
    "httpGet",
    "httpPost",
    "httpDo",
    "_pWriters",
    "createWriter",
    "save",
    "saveJSON",
    "saveJSONObject",
    "saveJSONArray",
    "saveStrings",
    "saveTable",
    "writeFile",
    "downloadFile",
    "_checkFileExtension",
    "_isSafari",
    "abs",
    "ceil",
    "constrain",
    "dist",
    "exp",
    "floor",
    "lerp",
    "log",
    "mag",
    "map",
    "max",
    "min",
    "norm",
    "pow",
    "round",
    "sq",
    "sqrt",
    "createVector",
    "noise",
    "noiseDetail",
    "noiseSeed",
    "randomSeed",
    "random",
    "randomGaussian",
    "_angleMode",
    "acos",
    "asin",
    "atan",
    "atan2",
    "cos",
    "sin",
    "tan",
    "degrees",
    "radians",
    "angleMode",
    "_toRadians",
    "_toDegrees",
    "_fromRadians",
    "textAlign",
    "textLeading",
    "textSize",
    "textStyle",
    "textWidth",
    "textAscent",
    "textDescent",
    "_updateTextMetrics",
    "loadFont",
    "text",
    "textFont",
    "append",
    "arrayCopy",
    "concat",
    "reverse",
    "shorten",
    "shuffle",
    "sort",
    "splice",
    "subset",
    "float",
    "int",
    "str",
    "boolean",
    "byte",
    "char",
    "unchar",
    "hex",
    "unhex",
    "join",
    "match",
    "matchAll",
    "nf",
    "nfc",
    "nfp",
    "nfs",
    "split",
    "splitTokens",
    "trim",
    "day",
    "hour",
    "minute",
    "millis",
    "month",
    "second",
    "year",
    "plane",
    "box",
    "sphere",
    "cylinder",
    "cone",
    "ellipsoid",
    "torus",
    "orbitControl",
    "debugMode",
    "noDebugMode",
    "_grid",
    "_axesIcon",
    "ambientLight",
    "directionalLight",
    "pointLight",
    "loadModel",
    "model",
    "loadShader",
    "createShader",
    "shader",
    "normalMaterial",
    "texture",
    "ambientMaterial",
    "specularMaterial",
]

p5_attr_patterns = [ re.compile(f"[^\d\w.]({attr})[^\d\w]") for attr in p5_attr ]


# Colored printing functions for strings that use universal ANSI escape sequences.
# fail: bold red, pass: bold green, warn: bold yellow, 
# info: bold blue, bold: bold white


def print_fail(message, end = '\n'):
    sys.stderr.write('\x1b[1;31m' + message.strip() + '\x1b[0m' + end)

def print_info(message, end = '\n'):
    sys.stdout.write('\x1b[1;32m' + message.strip() + '\x1b[0m' + end)

def print_warn(message, end = '\n'):
    sys.stderr.write('\x1b[1;33m' + message.strip() + '\x1b[0m' + end)

def detect_p5_usage( source ):
    matches = []
    for patt in p5_attr_patterns:
        matches.extend(list(re.finditer( patt, source )))
    return matches



def generate_info( source, matches ):
    matches_w_lines = []
    for match in matches:
        span = match.span(1)
        linesCount = source[:span[1]].count("\n") + 1
        matches_w_lines.append( (match, linesCount) )
    matches = sorted( matches_w_lines, key= lambda entry:entry[1]  )
    for match in matches:
        print_warn(f"On line {match[1]}: {match[0].group(1)}")



if __name__ == "__main__":
    if len(sys.argv) < 2:
        print_fail("Please enter a filename as an argument!")
        sys.exit()
    elif not os.path.isfile(sys.argv[1]):
        print_fail(f"Can't find the file: {sys.argv[1]}")
        sys.exit()

    in_file = sys.argv[1]

    print_info("--------------------------------------------------------------------------")
    print_info("Scanning file for potential methods and properties of global p5 instance..")
    print_info("--------------------------------------------------------------------------")
    with open(in_file, "r") as file:
        source = file.read()

    matches = detect_p5_usage( source )
    if matches:
        generate_info(source, matches)
    else:
        print_info("No attempts to access global p5 instance!")

    print_info("-----------------------------------------------------------------------------------------")
    print_info("If any of the previous tokens are p5 methods or properties, prepend them with this.sketch")
    print_info("-----------------------------------------------------------------------------------------")

